:javascript

  //use navigator.geolocation.getCurrentPosition((pos) => {position.coords.latitude and position.coords.longitude}
  // to get the user's position instead
  function initMap(){
    GEOCODER = new google.maps.Geocoder;

    geolocate()
    update_latlng_on_focusout()
  }

  function geolocate(){
    $.ajax({
      url: "https://www.googleapis.com/geolocation/v1/geolocate?key=#{ENV['GOOGLE_API_KEY']}",
      type: 'POST',
      data: {},
      success: guess_address
    })
  }

  function guess_address(response){
    if($('#site_address').val() !== ''){
      return
    }
    GEOCODER.geocode({'location': response['location']}, function(results, status) {
      if (status === 'OK') {
        if (results[0]) {
          $('#site_address').val(results[0]['formatted_address'])
          set_latlng()
        } else {
          window.alert('No results found');
        }
      } else {
        window.alert('Geocoder failed due to: ' + status);
      }
    });
  }

  function update_latlng_on_focusout(){
    $('#site_address').focusout(function(){
      set_latlng()
    })
  }

  function set_latlng(){
    if($('#site_address').val === ''){
      return
    }
    GEOCODER.geocode( { 'address': $('#site_address').val()}, function(results, status) {
      if (status == 'OK') {
        $('#site_lat').val(results[0]['geometry']['location']['lat']())
        $('#site_long').val(results[0]['geometry']['location']['lng']())
      } else {
        alert('Geocode was not successful for the following reason: ' + status);
      }
    });
  }

  //  function handleClientLoad(){
  //    gapi.load('client:auth2', init_client)
  //  }//
  //
  //

  //  function init_client(){
  //    gapi.client.init({
  //      apiKey: "#{ENV['GOOGLE_API_KEY']}",
  //      clientId: "#{ENV['GOOGLE_CLIENT_ID']}",
  //      discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/people/v1/rest"],
  //      scope: "https://www.googleapis.com/auth/contacts"
  //    }).then(()=>{
  //      gapi.auth2.getAuthInstance().signIn()
  //      console.log(gapi.auth2.getAuthInstance().isSignedIn.get())
  //    }).then(()=>{
  //      console.log(gapi.auth2.getAuthInstance().isSignedIn.get())
  //      if(gapi.auth2.getAuthInstance().isSignedIn.get()){
  //        list_names()
  //      }
  //    })
  //  }//

  //  function list_names(){
  //    gapi.client.people.people.connections.list({
  //      'resourceName': 'people/me',
  //      'pageSize': 10,
  //      'personFields': 'names,emailAddresses',
  //    }).then((response)=>{
  //      console.log('yes')
  //      console.log(response)
  //    })
  //  }

  //// Client ID and API key from the Developer Console
//  var CLIENT_ID = "#{ENV['GOOGLE_CLIENT_ID']}";
//  var API_KEY = "#{ENV['GOOGLE_API_KEY']}";//

//  // Array of API discovery doc URLs for APIs used by the quickstart
//  var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/people/v1/rest"];//

//  // Authorization scopes required by the API; multiple scopes can be
//  // included, separated by spaces.
//  var SCOPES = "https://www.googleapis.com/auth/contacts.readonly";//

//  /**
//   *  On load, called to load the auth2 library and API client library.
//   */
//  function handleClientLoad() {
//    gapi.load('client:auth2', initClient);
//  }//

//  /**
//   *  Initializes the API client library and sets up sign-in state
//   *  listeners.
//   */
//  function initClient() {
//    gapi.client.init({
//      apiKey: API_KEY,
//      clientId: CLIENT_ID,
//      discoveryDocs: DISCOVERY_DOCS,
//      scope: SCOPES
//    }).then(function () {
//      // Listen for sign-in state changes.
//      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);//

//      // Handle the initial sign-in state.
//      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());//

//      $('#authorize_button').click(handleAuthClick)
//      $('#signout_button').click(handleSignoutClick)
//    });
//  }//

//  /**
//   *  Called when the signed in status changes, to update the UI
//   *  appropriately. After a sign-in, the API is called.
//   */
//  function updateSigninStatus(isSignedIn) {
//    if (isSignedIn) {
//      $('#authorize_button').css('display','none');
//      $('#signout_button').css('display','block');
//      listConnectionNames();
//    } else {
//      $('#authorize_button').css('display','block');
//      $('#signout_button').css('display','none');
//    }
//  }//

//  /**
//   *  Sign in the user upon button click.
//   */
//  function handleAuthClick(event) {
//    gapi.auth2.getAuthInstance().signIn();
//  }//

//  /**
//   *  Sign out the user upon button click.
//   */
//  function handleSignoutClick(event) {
//    gapi.auth2.getAuthInstance().signOut();
//  }//

//  /**
//   * Append a pre element to the body containing the given message
//   * as its text node. Used to display the results of the API call.
//   *
//   * @param {string} message Text to be placed in pre element.
//   */
//  function appendPre(message) {
//    var pre = document.getElementById('content');
//    var textContent = document.createTextNode(message + '\n');
//    pre.appendChild(textContent);
//  }//

//  /**
//   * Print the display name if available for 10 connections.
//   */
//  function listConnectionNames() {
//    gapi.client.people.people.connections.list({
//       'resourceName': 'people/me',
//       'pageSize': 10,
//       'personFields': 'names,emailAddresses',
//     }).then(function(response) {
//       var connections = response.result.connections;
//       console.log(connections)
//     });
//  }

%script{async:'', defer: true, src: "https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_API_KEY']}&callback=initMap"}
%script{async:'', defer: true, src: "https://apis.google.com/js/api.js", onload: "handleClientLoad()"}


%main.main-content.bgc-grey-100
  #mainContent
    / .row
    /   %button#authorize_button Authorize
    /   %button#signout_button Signout
    .row.gap-20.masonry.pos-r
    .masonry-item.col-md-12
      .bgc-white.p-20.bd
        %h6.c-grey-900= site.new_record? ? 'New Customer' : site.full_name
        .mT-30
          = form_for site do |f|
            = f.hidden_field :lat
            = f.hidden_field :long
            .form-row
              .form-group.col-md-6
                %label First Name
                = f.text_field :first_name, class: 'form-control'
              .form-group.col-md-6
                %label Last Name
                = f.text_field :last_name, class: 'form-control'
            .form-group
              %label Full Address
              = f.text_field :address, class: 'form-control', placeholder: "ex: 1234 Main St, San Fransisco, CA, USA"
            .form-row
              .form-group.col-md-6
                %label Email
                = f.text_field :email, class: 'form-control'
              .form-group.col-md-6
                %label Phone
                = f.text_field :phone, class: 'form-control'
            .form-group
              %label Character Notes
              = f.text_area :character_notes, class: 'form-control', rows: '5'
            .d-flex.justify-content-around
              = f.submit 'Save Customer', class: 'btn btn-primary'
              - if !site.new_record?
                = link_to "Delete",
                    site,
                    method: :delete,
                    data: {confirm: 'Are you sure you want to delete this site?'},
                    class: 'text-white btn btn-danger'
