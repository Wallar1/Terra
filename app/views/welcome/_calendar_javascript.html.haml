:javascript
  // On load, called to load the auth2 library and API client library.
  function handleClientLoad(){
    gapi.load('client:auth2', initClient);
  }

  //  Initializes the API client library and sets up sign-in state
  //  listeners.
  function initClient() {
    gapi.client.init({
      apiKey: API_KEY,
      clientId: CLIENT_ID,
      discoveryDocs: DISCOVERY_DOCS,
      scope: SCOPES
    }).then(function () {
      // Listen for sign-in state changes.
      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

      // Handle the initial sign-in state.
      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      $('#authorize_button').on('click',handleAuthClick);
      $('#signout_button').on('click',handleSignoutClick);
    });
  }

  // Client ID and API key from the Developer Console
  var CLIENT_ID = "#{ENV['GOOGLE_CLIENT_ID']}";
  var API_KEY = "#{ENV['GOOGLE_CALENDAR']}";

  // Array of API discovery doc URLs for APIs used by the quickstart
  var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

  // Authorization scopes required by the API; multiple scopes can be
  // included, separated by spaces.
  var SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

  

  /**
   *  Called when the signed in status changes, to update the UI
   *  appropriately. After a sign-in, the API is called.
   */
  function updateSigninStatus(isSignedIn) {
    if (isSignedIn) {
      $('#authorize_button').css('display','none');
      $('#signout_button').css('display','block');
      listUpcomingEvents();
    } else {
      $('#authorize_button').css('display','block');
      $('#signout_button').css('display','none');
    }
  }

  /**
   *  Sign in the user upon button click.
   */
  function handleAuthClick(event) {
    gapi.auth2.getAuthInstance().signIn();
  }

  /**
   *  Sign out the user upon button click.
   */
  function handleSignoutClick(event) {
    gapi.auth2.getAuthInstance().signOut();
  }

  /**
   * Print the summary and start datetime/date of the next ten events in
   * the authorized user's calendar. If no events are found an
   * appropriate message is printed.
   */
  function listUpcomingEvents() {
    gapi.client.calendar.events.list({
      'calendarId': '0ebaddf129c7ars64fhihg9cv0@group.calendar.google.com',
      'timeMin': (new Date()).toISOString(),
      'showDeleted': false,
      'singleEvents': true,
      'maxResults': 10,
      'orderBy': 'startTime'
    }).then(function(response){
      console.log(response)
      var events = response.result.items;
      renderItinerary(events)
    })
  }

  function renderItinerary(events){
    $.ajax({
      url: '/welcome/render_itinerary',
      data: {events: JSON.stringify(events)},
      type: 'GET',
      success: function(response){
        $('#itineraryItems').html(response)
        console.log($('#itineraryItems').html())
      }
    })
  }

%script{:async => "", :defer => "defer", :onload => "this.onload=function(){};handleClientLoad();", :onreadystatechange => "if (this.readyState === 'complete') this.onload()", :src => "https://apis.google.com/js/api.js"}
%button.btn.btn-primary#authorize_button Authorize
%button.btn.btn-primary#signout_button Sign Out
#itineraryItems
/ %a{href: 'https://google.com/calendar', target: '_blank'}
/   .btn.btn-primary My Google Calendars